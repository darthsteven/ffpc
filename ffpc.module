<?php

/**
 * Implements hook_views_api().
 */
function ffpc_views_api() {
  return array(
    'api' => 2,
  );
}

/**
 * Get all the enclosure field types supported.
 */
function ffpc_get_handled_field_types($type) {
  $field_types = drupal_static(__FUNCTION__);

  if (!isset($field_types)) {
    $field_types = module_invoke_all('ffpc_handled_field_types');
    if (!is_array($field_types)) {
      $field_types = array();
    }
    drupal_alter('ffpc_handled_field_types', $field_types);
  }

  return isset($field_types[$type]) ? $field_types[$type] : array();
}

/**
 * Implements hook_ffpc_handled_field_types().
 */
function ffpc_ffpc_handled_field_types() {
  $fields = array();

  $fields['file']['file_field'] = array(
    'identification callback' => 'ffpc_file_field_identify',
    'render callback' => 'ffpc_file_field_render',
  );
  $fields['date']['date_property'] = array(
    'identification callback' => 'ffpc_date_property_identify',
    'render callback' => 'ffpc_date_property_render',
  );
  $fields['date']['date_field'] = array(
    'identification callback' => 'ffpc_date_field_identify',
    'render callback' => 'ffpc_date_field_render',
  );

  return $fields;
}

/**
 * Identification callback for file field view fields.
 */
function ffpc_file_field_identify($handler) {
  if (isset($handler->field_info['type']) && ($handler->field_info['type'] == 'file')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Identification callback for date field view fields.
 */
function ffpc_date_field_identify($handler) {
  if (isset($handler->field_info['type']) && ($handler->field_info['type'] == 'date')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Identification callback for date handler view fields.
 */
function ffpc_date_property_identify($handler) {
  return is_a($handler, 'views_handler_field_date');
}

/**
 * Render callback for the file field type.
 */
function ffpc_file_field_render($item, $value, $field_handler) {
  $files = $field_handler->get_value($value);
  foreach ($files as $file) {
    $item->elements[] = array(
      'key' => 'enclosure',
      'attributes'  =>  array(
        'url' => file_create_url($file['uri']),
        'length' => $file['filesize'],
        'type' => $file['filemime'],
      ),
    );
    break;
  }
}

/**
 * Render callback for the date field type.
 */
function ffpc_date_field_render($item, $values, $field_handler) {
  $value = $field_handler->get_value($values);
  $date_item = reset($value);
  $date = new DateObject($date_item['value'], $date_item['timezone_db'], date_type_format($date_item['date_type']));
  if (!empty($date) && $date_item['timezone_db'] != $date_item['timezone']) {
    date_timezone_set($date, timezone_open($date_item['timezone']));
  }
  $timestamp = !empty($date) ? date_format_date($date, 'custom', 'U') : '';
  if (!empty($timestamp)) {
    $item->elements[] = array('key' => 'pubDate', 'value' => gmdate('r', $timestamp));
  }

}

/**
 * Render callback for the date handler type.
 */
function ffpc_date_property_render($item, $values, $field_handler) {
  $value = $field_handler->get_value($values);
  $item->elements[] = array('key' => 'pubDate', 'value' => gmdate('r', $value));
}

/**
 * Implements hook_preprocess_ffpc_view_podcast_feed().
 */
function template_preprocess_ffpc_view_podcast_feed(&$vars) {
  global $base_url;
  global $language;

  $view     = &$vars['view'];
  $options  = &$vars['options'];
  $items    = &$vars['rows'];
  $style    = &$view->style_plugin;

  if (!empty($options['mission_description'])) {
    $description = variable_get('site_mission', '');
  }
  else {
    $description = $options['description'];
  }

  if ($view->display_handler->get_option('sitename_title')) {
    $title = variable_get('site_name', 'Drupal');
    if ($slogan = variable_get('site_slogan', '')) {
      $title .= ' - ' . $slogan;
    }
  }
  else {
    $title = $view->get_title();
  }

  // Figure out which display which has a path we're using for this feed. If there isn't
  // one, use the global $base_url
  $link_display_id = $view->display_handler->get_link_display();
  if ($link_display_id && !empty($view->display[$link_display_id])) {
    $path = $view->display[$link_display_id]->handler->get_path();
  }

  if ($path) {
    $path = $view->get_url(NULL, $path);
    $url_options = array('absolute' => TRUE);
    if (!empty($view->exposed_raw_input)) {
      $url_options['query'] = $view->exposed_raw_input;
    }

    // Compare the link to the default home page; if it's the default home page, just use $base_url.
    if ($path == variable_get('site_frontpage', 'node')) {
      $path = '';
    }

    $vars['link'] = check_url(url($path, $url_options));
  }

  // This is where we add additional elements to the podcast.
  $args = array();
  if (!empty($options['copyright'])) {
    $args['copyright'] = $options['copyright'];
  }
  if (!empty($options['itunes-image'])) {
    $args['itunes:image'] = check_url(url($options['itunes-image'], array('absolute' => TRUE)));
  }
  if (!empty($options['itunes-explicit'])) {
    $args['itunes:explicit'] = $options['itunes-explicit'];
  }
  if (!empty($options['itunes-owner-name'])) {
    $args['itunes:owner']['itunes:name'] = $options['itunes-owner-name'];
  }
  if (!empty($options['itunes-owner-email'])) {
    $args['itunes:owner']['itunes:email'] = $options['itunes-owner-email'];
  }
  if (!empty($options['itunes-subtitle'])) {
    $args['itunes:subtitle'] = $options['itunes-subtitle'];
  }
  if (!empty($options['itunes-author'])) {
    $args['itunes:author'] = $options['itunes-author'];
  }
  if (!empty($options['itunes-summary'])) {
    $args['itunes:summary'] = $options['itunes-summary'];
  }

  $vars['namespaces'] = drupal_attributes($style->namespaces);
  $vars['channel'] = format_rss_channel($title, $vars['link'], $description, $items, $language->language, $args);

  // During live preview we don't want to output the header since the contents
  // of the feed are being displayed inside a normal HTML page.
  if (empty($view->live_preview)) {
    drupal_add_http_header('Content-Type', 'application/rss+xml; charset=utf-8');
  }
}
